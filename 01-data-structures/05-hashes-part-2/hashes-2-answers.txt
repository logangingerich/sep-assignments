Describe three collision resolution strategies not mentioned here.
1. Random Hashing: Probe sequence is generated by a pseudorandom number generator
seeded by the key. In the case of collision, a new random number is generated.

2. Hopscotch Hashing: Combines cuckoo hashing and linear probing. Defines a neighborhood
of buckets near original hash bucket, where given entry is always found. So, search
is limited to the number of entries in the neighborhood. If all neighborhood buckets
are occupied, items are displaced in a series of 'hops'. In the end, the open slot
is moved into the neighborhood.

3. Robin Hood Hashing: Variation of double-hashing. A new key may displace an already
inserted key if its probe count is larger than that of the key in the current position.

Create your own collision resolution strategy and describe how it works.
-You could extend the Cuckoo Hashing concept and generate 3 or more potential
indexes for each key, using different hashing functions. You would then loop through
each potential option generated by the different index positions before resizing
the hash.
